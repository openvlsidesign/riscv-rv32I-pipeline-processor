$date
	Tue Jul 29 07:19:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module control_hazard_tb $end
$var wire 32 ! WriteData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 # DataAdr [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 32 & DataAdr [31:0] $end
$var wire 1 " MemWrite $end
$var wire 1 $ clk $end
$var wire 1 ' p2_e_pc_src $end
$var wire 1 % reset $end
$var wire 1 ( stall_f $end
$var wire 1 ) stall_d $end
$var wire 32 * pc_p_4 [31:0] $end
$var wire 32 + pc [31:0] $end
$var wire 32 , p3_m_data_mem [31:0] $end
$var wire 1 - p2_e_zero $end
$var wire 32 . p2_e_pc_target [31:0] $end
$var wire 32 / p2_e_b_i [31:0] $end
$var wire 32 0 p2_e_alu_result [31:0] $end
$var wire 5 1 p1_d_rs2 [4:0] $end
$var wire 5 2 p1_d_rs1 [4:0] $end
$var wire 2 3 p1_d_result_src [1:0] $end
$var wire 1 4 p1_d_reg_write $end
$var wire 32 5 p1_d_rd2 [31:0] $end
$var wire 32 6 p1_d_rd1 [31:0] $end
$var wire 5 7 p1_d_rd [4:0] $end
$var wire 1 8 p1_d_mem_write $end
$var wire 1 9 p1_d_jump $end
$var wire 32 : p1_d_immext [31:0] $end
$var wire 2 ; p1_d_imm_src [1:0] $end
$var wire 1 < p1_d_branch $end
$var wire 1 = p1_d_alu_src $end
$var wire 3 > p1_d_alu_control [2:0] $end
$var wire 32 ? instr [31:0] $end
$var wire 2 @ forwarding_b [1:0] $end
$var wire 2 A forwarding_a [1:0] $end
$var wire 1 B flush_e $end
$var wire 1 C flush_d $end
$var reg 32 D WriteData [31:0] $end
$var reg 32 E p1_d_instr [31:0] $end
$var reg 32 F p1_d_pc [31:0] $end
$var reg 32 G p1_d_pc_p_4 [31:0] $end
$var reg 32 H p2_e_a_i [31:0] $end
$var reg 3 I p2_e_alu_control [2:0] $end
$var reg 1 J p2_e_alu_src $end
$var reg 32 K p2_e_b [31:0] $end
$var reg 1 L p2_e_branch $end
$var reg 2 M p2_e_imm_src [1:0] $end
$var reg 32 N p2_e_immext [31:0] $end
$var reg 1 O p2_e_jump $end
$var reg 1 P p2_e_mem_write $end
$var reg 32 Q p2_e_pc [31:0] $end
$var reg 32 R p2_e_pc_p_4 [31:0] $end
$var reg 5 S p2_e_rd [4:0] $end
$var reg 32 T p2_e_rd1 [31:0] $end
$var reg 32 U p2_e_rd2 [31:0] $end
$var reg 1 V p2_e_reg_write $end
$var reg 2 W p2_e_result_src [1:0] $end
$var reg 5 X p2_e_rs1 [4:0] $end
$var reg 5 Y p2_e_rs2 [4:0] $end
$var reg 32 Z p3_m_alu_result [31:0] $end
$var reg 1 [ p3_m_mem_write $end
$var reg 32 \ p3_m_pc_p_4 [31:0] $end
$var reg 5 ] p3_m_rd [4:0] $end
$var reg 1 ^ p3_m_reg_write $end
$var reg 2 _ p3_m_result_src [1:0] $end
$var reg 32 ` p3_m_write_data [31:0] $end
$var reg 32 a p4_w_alu_result [31:0] $end
$var reg 32 b p4_w_data_mem [31:0] $end
$var reg 32 c p4_w_pc_p_4 [31:0] $end
$var reg 5 d p4_w_rd [4:0] $end
$var reg 1 e p4_w_reg_write $end
$var reg 2 f p4_w_result_src [1:0] $end
$scope module alu_inst $end
$var wire 32 g a_i [31:0] $end
$var wire 3 h alu_control_i [2:0] $end
$var wire 32 i b_i [31:0] $end
$var wire 1 - zero_o $end
$var reg 32 j result_o [31:0] $end
$upscope $end
$scope module controller_inst $end
$var wire 3 k funct3 [2:0] $end
$var wire 1 l funct7 $end
$var wire 7 m op_i [6:0] $end
$var wire 1 - zero_flag_i $end
$var wire 2 n result_src_o [1:0] $end
$var wire 1 4 reg_write_o $end
$var wire 1 8 mem_write_o $end
$var wire 1 9 jump_o $end
$var wire 2 o imm_src_o [1:0] $end
$var wire 1 < branch_o $end
$var wire 1 = alu_src_o $end
$var wire 2 p alu_op [1:0] $end
$var wire 3 q alu_ctrl_o [2:0] $end
$scope module alu_decoder_inst $end
$var wire 3 r funct3 [2:0] $end
$var wire 1 l funct7 $end
$var wire 7 s op_i [6:0] $end
$var wire 7 t cond [6:0] $end
$var wire 2 u alu_op_i [1:0] $end
$var reg 3 v alu_ctrl_o [2:0] $end
$upscope $end
$scope module main_decoder_inst $end
$var wire 7 w op_i [6:0] $end
$var reg 2 x alu_op_o [1:0] $end
$var reg 1 = alu_src_o $end
$var reg 1 < branch_o $end
$var reg 2 y imm_src_o [1:0] $end
$var reg 1 9 jump_o $end
$var reg 1 8 mem_write_o $end
$var reg 1 4 reg_write_o $end
$var reg 2 z result_src_o [1:0] $end
$upscope $end
$upscope $end
$scope module data_memory $end
$var wire 32 { address_i [31:0] $end
$var wire 1 $ clk $end
$var wire 32 | data_mem_o [31:0] $end
$var wire 1 % reset $end
$var wire 1 [ wr_en_i $end
$var wire 32 } write_data_i [31:0] $end
$upscope $end
$scope module hazard_unit_inst $end
$var wire 1 ' pc_src_i $end
$var wire 5 ~ rde_i [4:0] $end
$var wire 5 !" rdm_i [4:0] $end
$var wire 5 "" rdw_i [4:0] $end
$var wire 1 ^ reg_write_m_i $end
$var wire 1 e reg_write_w_i $end
$var wire 1 #" result_src_i $end
$var wire 5 $" rs1d_i [4:0] $end
$var wire 5 %" rs1e_i [4:0] $end
$var wire 5 &" rs2d_i [4:0] $end
$var wire 5 '" rs2e_i [4:0] $end
$var reg 1 C flush_d_o $end
$var reg 1 B flush_e_o $end
$var reg 2 (" forwarding_a_o [1:0] $end
$var reg 2 )" forwarding_b_o [1:0] $end
$var reg 1 *" lw_stall $end
$var reg 1 ) stall_d_o $end
$var reg 1 ( stall_f_o $end
$upscope $end
$scope module instr_memory $end
$var wire 32 +" instr_o [31:0] $end
$var wire 32 ," pc_i [31:0] $end
$upscope $end
$scope module prg_cntr $end
$var wire 1 $ clk $end
$var wire 32 -" pc_next_i [31:0] $end
$var wire 1 % reset $end
$var wire 1 ( stall_i $end
$var reg 32 ." pc_o [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 $ clk $end
$var wire 5 /" dest_reg_i [4:0] $end
$var wire 1 e reg_file_writeen_i $end
$var wire 1 % reset $end
$var wire 5 0" rs1 [4:0] $end
$var wire 5 1" rs2 [4:0] $end
$var wire 32 2" wr_data_i [31:0] $end
$var wire 32 3" readdata2_o [31:0] $end
$var wire 32 4" readdata1_o [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 5" i [31:0] $end
$upscope $end
$upscope $end
$scope module se_inst $end
$var wire 2 6" imm_src_i [1:0] $end
$var wire 32 7" instr_i [31:0] $end
$var reg 32 8" immext_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 8"
bx 7"
bx 6"
b100000 5"
bx 4"
bx 3"
b0 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
x*"
b0 )"
b0 ("
bx '"
bx &"
bx %"
bx $"
x#"
bx ""
bx !"
bx ~
bx }
bx |
bx {
b0 z
bx y
b10 x
bx w
b0 v
b10 u
b10xxxxx t
bx s
bx r
b0 q
b10 p
bx o
b0 n
bx m
xl
bx k
b0 j
bx i
bx h
bx g
bx f
xe
bx d
bx c
bx b
bx a
bx `
bx _
x^
bx ]
bx \
x[
bx Z
bx Y
bx X
bx W
xV
bx U
bx T
bx S
bx R
bx Q
xP
xO
bx N
bx M
xL
bx K
xJ
bx I
bx H
bx G
bx F
bx E
b0 D
xC
xB
b0 A
b0 @
bx ?
b0 >
0=
0<
bx ;
b0 :
09
08
bx 7
bx 6
bx 5
14
b0 3
bx 2
bx 1
b0 0
bx /
bx .
1-
bx ,
bx +
bx *
x)
x(
x'
bx &
1%
0$
bx #
x"
b0 !
$end
#5000
b0 6
b0 4"
b0 5
b0 3"
b0 p
b0 u
b0 x
b0 ;
b0 o
b0 y
b0 6"
04
0B
0C
0)
0(
0*"
b0 ?
b0 +"
b0 2
b0 $"
b0 0"
b0 1
b0 &"
b0 1"
b0 7
b0 m
b0 s
b0 w
b0 k
b0 r
b0 t
0l
b100 -"
b0 /
b0 i
0'
0#"
b0 H
b0 g
b0 K
b100 *
b0 +
b0 ,"
b0 ."
b0 G
b0 F
b0 E
b0 7"
b0 R
b0 S
b0 ~
b0 Y
b0 '"
b0 X
b0 %"
b0 .
b0 Q
b0 N
b0 U
b0 T
b0 I
b0 h
0J
0O
0L
0P
0V
b0 M
b0 W
b0 `
b0 }
b0 \
b0 _
0"
0[
0^
b0 ]
b0 !"
b0 #
b0 &
b0 Z
b0 {
0e
b0 f
b0 a
b0 d
b0 ""
b0 /"
b0 c
b0 b
1$
#10000
0$
#15000
1$
#20000
0$
0%
#25000
b1000001000010001100011 ?
b1000001000010001100011 +"
b1000 -"
b1000 *
b100 +
b100 ,"
b100 ."
b100 G
bx b
1$
#30000
0$
#35000
b1 >
b1 q
b1 v
b10101 6
b10101 4"
b10101 5
b10101 3"
1<
b10 ;
b10 o
b10 y
b10 6"
b100010 t
b1 p
b1 u
b1 x
bx 3
bx n
bx z
b1 2
b1 $"
b1 0"
b10 1
b10 &"
b10 1"
b1000 7
b1100011 m
b1100011 s
b1100011 w
b1000 :
b1000 8"
b100000000010000010011 ?
b100000000010000010011 +"
b1100 -"
b100 R
b1000 G
b100 F
b1000001000010001100011 E
b1000001000010001100011 7"
b1100 *
b1000 +
b1000 ,"
b1000 ."
1$
#40000
0$
#45000
b0 >
b0 q
b0 v
b1 :
b1 8"
b0 6
b0 4"
1B
1C
0<
b1000000 t
b10 p
b10 u
b10 x
b0 ;
b0 o
b0 y
b0 6"
b0 3
b0 n
b0 z
1=
14
b10101 /
b10101 i
1-
b0 0
b0 j
1'
b10010110011 ?
b10010110011 +"
b1100 -"
b0 2
b0 $"
b0 0"
b1 1
b1 &"
b1 1"
b10011 m
b10011 s
b10011 w
b10101 K
b10101 H
b10101 g
x#"
b10000 *
b1100 +
b1100 ,"
b1100 ."
b1100 G
b1000 F
b100000000010000010011 E
b100000000010000010011 7"
b1000 R
b1000 S
b1000 ~
b10 Y
b10 '"
b1 X
b1 %"
b100 Q
b1100 .
b1000 N
b10101 U
b10101 T
b1 I
b1 h
1L
bx W
b100 \
1$
#50000
0$
#55000
0B
0C
b0 /
b0 i
0'
b0 5
b0 3"
b0 t
b0 p
b0 u
b0 x
0=
04
b10000 -"
b0 K
b0 H
b0 g
1-
b0 0
b0 j
0#"
b0 1
b0 &"
b0 1"
b0 7
b0 m
b0 s
b0 w
b0 :
b0 8"
b100 c
b10101 `
b10101 }
bx _
b1000 ]
b1000 !"
b1000 \
b0 R
b0 S
b0 ~
b0 Y
b0 '"
b0 X
b0 %"
b0 Q
b0 .
b0 N
b0 U
b0 T
b0 I
b0 h
0L
b0 W
b0 G
b0 F
b0 E
b0 7"
1$
#60000
0$
#65000
b1000010 t
b10 p
b10 u
b10 x
bx ;
bx o
bx y
bx 6"
14
bx ?
bx +"
b10100 -"
b1001 7
b110011 m
b110011 s
b110011 w
b10100 *
b10000 +
b10000 ,"
b10000 ."
b10000 G
b1100 F
b10010110011 E
b10010110011 7"
b0 `
b0 }
b0 _
b0 ]
b0 !"
b0 \
bx f
b1000 d
b1000 ""
b1000 /"
b1000 c
1$
#70000
0$
#75000
bx 6
bx 4"
bx 5
bx 3"
bx 2
bx $"
bx 0"
bx 1
bx &"
bx 1"
bx 7
bx m
bx s
bx w
bx k
bx r
b10xxxxx t
xl
b11000 -"
b0 f
b0 d
b0 ""
b0 /"
b0 c
b10000 R
b1001 S
b1001 ~
b1100 .
b1100 Q
1V
b10100 G
b10000 F
bx E
bx 7"
b11000 *
b10100 +
b10100 ,"
b10100 ."
1$
#80000
0$
#85000
bx /
bx i
x-
bx 0
bx j
b11100 -"
bx K
bx H
bx g
b11100 *
b11000 +
b11000 ,"
b11000 ."
b11000 G
b10100 F
b10100 R
bx S
bx ~
bx Y
bx '"
bx X
bx %"
b10000 .
b10000 Q
bx U
bx T
1^
b1001 ]
b1001 !"
b10000 \
1$
#90000
0$
#95000
b100000 -"
1e
b1001 d
b1001 ""
b1001 /"
b10000 c
bx `
bx }
bx ]
bx !"
b10100 \
bx #
bx &
bx Z
bx {
b11000 R
b10100 .
b10100 Q
b11100 G
b11000 F
b100000 *
b11100 +
b11100 ,"
b11100 ."
1$
#100000
0$
#105000
b100100 -"
bx !
bx D
bx 2"
b100100 *
b100000 +
b100000 ,"
b100000 ."
b100000 G
b11100 F
b11100 R
b11000 .
b11000 Q
b11000 \
bx a
bx d
bx ""
bx /"
b10100 c
1$
#110000
0$
#115000
b101000 -"
b11000 c
b11100 \
b100000 R
b11100 .
b11100 Q
b100100 G
b100000 F
b101000 *
b100100 +
b100100 ,"
b100100 ."
1$
#120000
0$
